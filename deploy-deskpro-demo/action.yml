name: 'Deploy Deskpro'
description: 'Deploy a Deskpro instance'

inputs:
  compose-project-path:
    description: 'Path to a compose project (directory where yml file is located'
    required: true

  deskpro-docker-repository:
    description: 'Deskpro docker repository'
    required: true

  mysql-docker-repository:
    description: 'MySQL docker repository'
    required: true

  docker-tag:
    description: 'Docker tag to deploy'
    required: false
    default: 'latest'

  registry-url:
    description: 'Docker registry url'
    required: false
    default: ''

  registry-username:
    description: 'Username for accessing the docker registry'
    required: true

  registry-password:
    description: 'Password for accessing the docker registry'
    required: true

  license-key:
    description: 'Deskpro license key'
    required: false

  artifact-suffix:
    description: 'Suffix attached to artifacts created as part of deployment'
    required: false

  vhost-domain:
    description: 'Domain from which to place the vhost deployment under'
    required: true

  url-resource:
    description: 'Resource to append to the URL when reporting the deployed instance'
    required: false

outputs:
  swarm-stack-name:
    description: 'Swarm stack name'
    value: ${{ steps.stack-metadata.outputs.stack-name }}

  url:
    description: 'Demo instance URL'
    value: ${{ steps.stack-metadata.outputs.url }}

runs:
  using: 'composite'
  steps:
    - name: Generate security credentials
      id: security-credentials
      shell: bash
      run: |
        echo "app-key=$(openssl rand -base64 32)" >> $GITHUB_OUTPUT
        echo "db-password=$(openssl rand -base64 32)" >> $GITHUB_OUTPUT

    - name: Parse repository metadata
      id: metadata
      shell: bash
      run: |
        repository="${{ github.repository }}"
        repository_owner="${{ github.repository_owner }}"
        repository_name=${repository#"${repository_owner}/"}
        repository_name=$(echo "$repository_name" | tr '[:upper:]' '[:lower:]')
        
        event_name=""
        pr_number=""
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          pr_number="${{ github.event.number }}"
          event_name="pr-${pr_number}"
        else
          echo "::error title=Invalid event type::The event type ${{ github.event_name }} is not supported by this action"
          exit 1
        fi

        suffix=""
        if [ -n "${{ inputs.artifact-suffix }}" ]; then
          suffix="_$(echo "${{ inputs.artifact-suffix }}" | tr '[:upper:]' '[:lower:]')"
        fi
        
        echo "repository-name=${repository_name}" >> $GITHUB_OUTPUT
        echo "event-name=${event_name}" >> $GITHUB_OUTPUT
        echo "suffix=${suffix}" >> $GITHUB_OUTPUT

    - name: Generate Stack metadata
      id: stack-metadata
      shell: bash
      run: |
        stack_name="demo_${{ steps.metadata.outputs.repository-name }}_${{ steps.metadata.outputs.event-name }}${{ steps.metadata.outputs.suffix }}"
        echo "stack-name=${stack_name}" >> $GITHUB_OUTPUT
        
        fqdn="${{ steps.metadata.outputs.repository-name }}-${{ steps.metadata.outputs.event-name }}${{ steps.metadata.outputs.suffix }}"
        fqdn="${fqdn}.${{ inputs.vhost-domain }}"
        echo "fqdn=${fqdn}" >> $GITHUB_OUTPUT
        echo "url=https://${fqdn}" >> $GITHUB_OUTPUT
        
        mysql_hostname="${{ steps.metadata.outputs.repository-name }}-${{ steps.metadata.outputs.event-name }}${{ steps.metadata.outputs.suffix }}-mysql"
        echo "mysql-hostname=${mysql_hostname}" >> $GITHUB_OUTPUT
        
        traefik_router_name="${{ steps.metadata.outputs.repository-name }}_${{ steps.metadata.outputs.event-name }}${{ steps.metadata.outputs.suffix }}"
        echo "traefik-router-name=${traefik_router_name}" >> $GITHUB_OUTPUT

    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        registry: ${{ inputs.registry-url }}
        username: ${{ inputs.registry-username }}
        password: ${{ inputs.registry-password }}

    - name: Deploy stack to Docker Swarm
      shell: sh
      env:
        IMAGE_TAG: ${{ inputs.docker-tag }}
        LICENSE_KEY: ${{ inputs.license-key }}
        DESKPRO_APP_KEY: ${{ steps.security-credentials.outputs.app-key }}
        VIRTUAL_HOST: ${{ steps.stack-metadata.outputs.fqdn }}
        MYSQL_HOSTNAME: ${{ steps.stack-metadata.outputs.mysql-hostname }}
        TRAEFIK_ROUTER_SERVICE_NAME: ${{ steps.stack-metadata.outputs.traefik-router-name }}
        DESKPRO_REPOSITORY: ${{ inputs.deskpro-docker-repository }}
        MYSQL_REPOSITORY: ${{ inputs.mysql-docker-repository }}
      working-directory: ${{ inputs.compose-project-path }}
      run: |
        docker compose config | docker stack deploy \
          -c - \
          --with-registry-auth \
          --resolve-image always \
          --prune \
          "${{ steps.stack-metadata.outputs.stack-name }}" 
        
        sleep 60

    - name: Lookup MySQL container ID
      shell: sh
      id: container
      run: |
        service_name="${{ steps.stack-metadata.outputs.stack-name }}_mysql"
        service_id="$(docker service ps -q "${service_name}" | head -1)"
        
        if [ -z "${service_id}" ]; then
          echo "::error title=Deskpro Swarm service ${service_name} not found::Deskpro Swarm service ${service_name} not found"
          exit 1
        fi
        
        container_id="$(docker inspect --format '{{.Status.ContainerStatus.ContainerID}}' "${service_id}")"
        echo "id=${container_id}" >> $GITHUB_OUTPUT

    - name: Fill db from seed
      shell: sh
      run: |
        docker exec "${{ steps.container.outputs.id }}" \
          mysql -A -e "CALL deskpro._testRefillAllFromSeed()"

    - name: Update URL setting
      shell: sh
      run: |
        docker exec "${{ steps.container.outputs.id }}" \
          mysql -A -D deskpro -e "UPDATE settings SET VALUE = '${{ steps.stack-metadata.outputs.url }}' WHERE NAME = 'core.deskpro_url';"

    - name: Find notification
      uses: peter-evans/find-comment@v2
      id: fc
      with:
        issue-number: ${{ github.event.pull_request.number }}
        comment-author: 'github-actions[bot]'
        body-includes: "Build for commit"

    - name: Create or update deployment notification
      uses: peter-evans/create-or-update-comment@v2
      with:
        comment-id: ${{ steps.fc.outputs.comment-id }}
        issue-number: ${{ github.event.pull_request.number }}
        edit-mode: replace
        body: |
          Build for commit ${{ github.event.pull_request.head.sha }} deployed to: ${{ steps.stack-metadata.outputs.url }}
          
          URLs:
          ${{ steps.stack-metadata.outputs.url }}${{ inputs.url-resource }}
