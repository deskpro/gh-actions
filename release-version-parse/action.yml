name: 'Release version parse'
description: 'Extract release version data for the build'

outputs:
  full-version:
    description: 'Full version, including pre-release tag and patch information'
    value: ${{ steps.release-version.outputs.full-version }}
  version:
    description: 'Version without pre-release tag and patch information'
    value: ${{ steps.release-version.outputs.version }}
  pre-release:
    description: 'Pre-release value, if set, of the version'
    value: ${{ steps.release-version.outputs.pre-release }}

  is-beta:
    description: 'If is beta'
    value: ${{ steps.release-version.outputs.is-beta }}
  is-stable:
    description: 'If is stable'
    value: ${{ steps.release-version.outputs.is-stable }}

  branch:
    description: 'The branch name behind the version'
    value: ${{ steps.release-version.outputs.branch }}

  git-tag:
    description: 'Git tag of the version'
    value: ${{ steps.release-version.outputs.git-tag }}
  container-tag:
    description: 'Container image tag of the version'
    value: ${{ steps.release-version.outputs.container-tag }}

  deb-package-version:
    description: 'DEB Package version'
    value: ${{ steps.release-version.outputs.package-version }}
  rpm-package-version:
    description: 'RPM Package version'
    value: ${{ steps.release-version.outputs.package-version }}
  apt-distribution:
    description: 'APT package repository distribution name'
    value: ${{ steps.release-version.outputs.apt-distribution }}

runs:
  using: 'composite'
  steps:
    - shell: sh
      id: release-version
      run: |
        if [ "${{ github.event_name }}" = "release" ]; then
          FULL_VERSION=$(echo "${{ github.event.release.tag_name }}" | sed -E -n 's/^v(.*)$/\1/p')

          if [ "$FULL_VERSION" = "" ]; then
            echo "::error ::Release tag name invalid"
          fi
        elif [ "${{ github.event_name }}" = "push" ] || [ "${{ github.event_name }}" = "pull_request" ]; then
          FULL_VERSION=$(echo "${{ github.ref }}" | sed -E 's/^refs\/heads\/release\/(.*)$/\1/')

          if [ "$FULL_VERSION" = "" ]; then
            echo "::error ::Branch name invalid"
          fi
        fi

        if [ "$FULL_VERSION" != "" ]; then
          VERSION=$(echo "$FULL_VERSION" | sed -n -E 's/^([0-9\.]+)(-.*){0,1}$/\1/p')
          PRE_RELEASE_TAG=$(echo "$FULL_VERSION" | sed -n -E 's/^([0-9\.]+)-(.*)?$/\2/p')

          PACKAGE_VERSION="${VERSION}"

          if [ "$PRE_RELEASE_TAG" != "" ]; then
            PACKAGE_VERSION="${PACKAGE_VERSION}~${PRE_RELEASE_TAG}"
          fi

          echo "::set-output name=full-version::${FULL_VERSION}"
          echo "::set-output name=version::${VERSION}"
          echo "::set-output name=pre-release::${PRE_RELEASE_TAG}"
          echo "::set-output name=is-beta::$(test "${PRE_RELEASE_TAG}" != "" && echo "true" || echo "false")"
          echo "::set-output name=is-stable::$(test "${PRE_RELEASE_TAG}" = "" && echo "true" || echo "false")"

          echo "::set-output name=branch::release/${FULL_VERSION}"
          echo "::set-output name=git-tag::v${FULL_VERSION}"
          echo "::set-output name=container-tag::${FULL_VERSION}"

          echo "::set-output name=package-version::${PACKAGE_VERSION}"

          echo "::set-output name=apt-distribution::$(test "${PRE_RELEASE_TAG}" = "" && echo "stable" || echo "beta")"
        fi
